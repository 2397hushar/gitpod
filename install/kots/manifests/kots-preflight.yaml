# Copyright (c) 2022 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: troubleshoot.sh/v1beta2
kind: Preflight
metadata:
  name: gitpod
spec:
  collectors:
    - run:
        collectorName: database
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/database:sje-kots-config-check.9
        name: database
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "db_incluster" }}' # DB_IN_CLUSTER_ENABLED
          - '{{repl ConfigOption "db_cloudsql_enabled" }}' # DB_CLOUDSQL_ENABLED
          - '{{repl ConfigOption "db_username" }}' # DB_USERNAME
          - '{{repl ConfigOption "db_password" }}' # DB_PASSWORD
          - '{{repl ConfigOption "db_host" }}' # DB_HOST
          - '{{repl ConfigOption "db_port" }}' # DB_PORT
          - '{{repl ConfigOption "db_cloudsql_instance" }}' # CloudSQL instances
          - '{{repl ConfigOption "db_gcp_credentials" }}' # CloudSQL credentials file
    - run:
        collectorName: "kernel"
        image: alpine/semver
        name: kernel
        namespace: '{{repl Namespace }}'
        command:
          - /bin/sh
          - -c
        args:
          - semver --coerce --range '>=5.4.0' $(uname -r) || echo invalid
    - run:
        collectorName: registry
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/registry:sje-kots-registry-check.16
        name: registry
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "reg_incluster" }}' # REG_IN_CLUSTER_ENABLED
          - '{{repl ConfigOption "reg_username" }}' # REG_USERNAME
          - '{{repl ConfigOption "reg_password" }}' # REG_PASSWORD
          - '{{repl ConfigOption "reg_url" }}' # REG_URL
          - '{{repl ConfigOption "reg_server" }}' # REG_SERVER
          - '{{repl ConfigOptionEquals "reg_incluster_storage" "s3" }}' # REG_IN_CLUSTER_S3_ENABLED
          - '{{repl ConfigOption "reg_incluster_storage_s3_region" }}' # REG_STORE_LOCATION
          - '{{repl ConfigOption "reg_incluster_storage_s3_endpoint" }}' # REG_S3_ENDPOINT
          - '{{repl ConfigOption "reg_incluster_storage_s3_accesskey" }}' # REG_S3_ACCESS_KEY_ID
          - '{{repl ConfigOption "reg_incluster_storage_s3_secretkey" }}' # REG_S3_SECRET_ACCESS_KEY
          - '{{repl ConfigOption "reg_incluster_storage_s3_bucketname" }}' # REG_S3_BUCKET_NAME
    - run:
        collectorName: storage
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/storage:sje-kots-storage-check.9
        name: storage
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "store_provider" }}' # STORE_PROVIDER
          - '{{repl ConfigOption "store_region" }}' # STORE_LOCATION
          - '{{repl ConfigOption "store_azure_account_name" }}' # AZURE_ACCOUNT_NAME
          - '{{repl ConfigOption "store_azure_access_key" }}' # AZURE_ACCESS_KEY
          - '{{repl ConfigOption "store_gcp_project" }}' # GCP_PROJECT_ID
          - '{{repl ConfigOption "store_gcp_credentials" }}' # GCP_SERVICE_ACCOUNT_KEY
          - '{{repl ConfigOption "store_s3_endpoint" }}' # S3_ENDPOINT
          - '{{repl ConfigOption "store_s3_access_key_id" }}' # S3_ACCESS_KEY_ID
          - '{{repl ConfigOption "store_s3_secret_access_key" }}' # S3_SECRET_ACCESS_KEY
          - '{{repl ConfigOption "store_s3_bucket" }}' # S3_BUCKET_NAME
    - run:
        # Check that the pull registry is accessible from the cluster
        collectorName: ping-registry
        image: alpine/curl
        name: ping-registry
        namespace: '{{repl Namespace }}'
        command:
          - /bin/sh
          - -c
        args:
          - |
            CONNECTION="error"

            if [ '{{repl HasLocalRegistry }}' = "true" ];
            then
              # Don't test for airgapped
              CONNECTION="ok"
            else
              URL="https://eu.gcr.io/v2/"
              echo "ping ${URL}"
              if curl --silent --max-time 5 "${URL}" > /dev/null;
              then
                CONNECTION="ok"
              fi
            fi

            echo "connection: ${CONNECTION}"
    - run:
        # validate the config
        collectorName: config-validation
        # this will normally be the release tag
        image: eu.gcr.io/gitpod-core-dev/build/installer:nvn-fix-11408.15
        name: config-validation
        namespace: '{{repl Namespace }}'
        command:
          - /bin/sh
          - -c
        args:
          - |
            export CONFIG_FILE="./gitpod-config.yaml"
            echo "Gitpod: Generate the base Installer config"
            /app/installer init > "${CONFIG_FILE}"

            echo "Gitpod: auto-detecting containerd location on host machine"
            if [ -d "/mnt/node0${CONTAINERD_DIR_K3S}" ]; then
              echo "Gitpod: containerd dir detected as k3s"

              yq e -i ".workspace.runtime.containerdRuntimeDir = \"${CONTAINERD_DIR_K3S}\"" "${CONFIG_FILE}"
            elif [ -d "/mnt/node0${CONTAINERD_DIR_AL}" ]; then
              echo "Gitpod: containerd dir detected as ${CONTAINERD_DIR_AL}"

              yq e -i ".workspace.runtime.containerdRuntimeDir = \"${CONTAINERD_DIR_AL}\"" "${CONFIG_FILE}"
            fi

            if [ -S "/mnt/node0${CONTAINERD_SOCKET_K3S}" ]; then
              echo "Gitpod: containerd socket detected as k3s"

              yq e -i ".workspace.runtime.containerdSocket = \"${CONTAINERD_SOCKET_K3S}\"" "${CONFIG_FILE}"
            elif [ -S "/mnt/node0${CONTAINERD_SOCKET_AL}" ]; then
              echo "Gitpod: containerd socket detected as ${CONTAINERD_SOCKET_AL}"

              yq e -i ".workspace.runtime.containerdSocket = \"${CONTAINERD_SOCKET_AL}\"" "${CONFIG_FILE}"
            fi

            echo "Gitpod: Inject the Replicated variables into the config"
            yq e -i '.domain = "{{repl ConfigOption "domain" }}"' "${CONFIG_FILE}"
            yq e -i '.license.kind = "secret"' "${CONFIG_FILE}"
            yq e -i '.license.name = "gitpod-license"' "${CONFIG_FILE}"

            if [ '{{repl ConfigOptionNotEquals "openVsxUrl" "" }}' = "true" ];
            then
              echo "Gitpod: Setting Open VSX Registry URL"
              yq e -i ".openVSX.url = \"{{repl ConfigOption "openVsxUrl" }}\"" "${CONFIG_FILE}"
            fi

            if [ '{{repl and (ConfigOptionEquals "db_incluster" "0") (ConfigOptionEquals "db_cloudsql_enabled" "1") }}' = "true" ];
            then
              echo "Gitpod: configuring CloudSQLProxy"

              yq e -i ".database.inCluster = false" "${CONFIG_FILE}"
              yq e -i ".database.cloudSQL.instance = \"{{repl ConfigOption "db_cloudsql_instance" }}\"" "${CONFIG_FILE}"
              yq e -i ".database.cloudSQL.serviceAccount.kind = \"secret\"" "${CONFIG_FILE}"
              yq e -i ".database.cloudSQL.serviceAccount.name = \"cloudsql\"" "${CONFIG_FILE}"
            fi

            if [ '{{repl and (ConfigOptionEquals "db_incluster" "0") (ConfigOptionEquals "db_cloudsql_enabled" "0") }}' = "true" ];
            then
              echo "Gitpod: configuring external database"

              yq e -i ".database.inCluster = false" "${CONFIG_FILE}"
              yq e -i ".database.external.certificate.kind = \"secret\"" "${CONFIG_FILE}"
              yq e -i ".database.external.certificate.name = \"database\"" "${CONFIG_FILE}"
            fi

            if [ '{{repl HasLocalRegistry }}' = "true" ];
            then
              echo "Gitpod: configuring mirrored container registry for airgapped installation"

              yq e -i ".repository = \"{{repl LocalRegistryAddress }}\"" "${CONFIG_FILE}"
              yq e -i ".imagePullSecrets[0].kind = \"secret\"" "${CONFIG_FILE}"
              yq e -i ".imagePullSecrets[0].name = \"{{repl ImagePullSecretName }}\"" "${CONFIG_FILE}"
              yq e -i '.dropImageRepo = true' "${CONFIG_FILE}"

              # Add the registry to the server allowlist - keep docker.io in case it's just using the mirrored registry functionality without being airgapped
              yq e -i ".containerRegistry.privateBaseImageAllowList += \"{{repl LocalRegistryHost }}\"" "${CONFIG_FILE}"
              yq e -i ".containerRegistry.privateBaseImageAllowList += \"docker.io\"" "${CONFIG_FILE}"
            fi

            # Output the local registry secret - this is proxy.replicated.com if user hasn't set their own
            echo "{{repl LocalRegistryImagePullSecret }}" | base64 -d > /tmp/kotsregistry.json

            if [ '{{repl ConfigOptionEquals "reg_incluster" "0" }}' = "true" ];
            then
              echo "Gitpod: configuring external container registry"

              # Create a container-registry secret merging the external registry and KOTS registry keys
              echo '{{repl printf "{\"auths\": {\"%s\": {\"username\": \"%s\", \"password\": %s, \"auth\": \"%s\"}}}" (ConfigOption "reg_server" | default (ConfigOption "reg_url")) (ConfigOption "reg_username") (ConfigOption "reg_password" | toJson) (printf "%s:%s" (ConfigOption "reg_username") (ConfigOption "reg_password") | Base64Encode) }}' \
                | yq -o=json '.' - \
                > /tmp/gitpodregistry.json

              cat /tmp/kotsregistry.json /tmp/gitpodregistry.json | jq -s '.[0] * .[1]' - - > /tmp/container-registry-secret

              echo "Gitpod: create the container-registry secret"
              yq e -i ".containerRegistry.inCluster = false" "${CONFIG_FILE}"
              yq e -i ".containerRegistry.external.url = \"{{repl ConfigOption "reg_url" }}\"" "${CONFIG_FILE}"
              yq e -i ".containerRegistry.external.certificate.kind = \"secret\"" "${CONFIG_FILE}"
              yq e -i ".containerRegistry.external.certificate.name = \"container-registry\"" "${CONFIG_FILE}"
            else
              if [ '{{repl ConfigOptionEquals "reg_incluster_storage" "s3" }}' = "true" ];
              then
                echo "Gitpod: configuring container registry S3 backend"

                yq e -i ".containerRegistry.s3storage.region = \"{{repl ConfigOption "reg_incluster_storage_s3_region" }}\"" "${CONFIG_FILE}"
                yq e -i ".containerRegistry.s3storage.endpoint = \"{{repl ConfigOption "reg_incluster_storage_s3_endpoint" }}\"" "${CONFIG_FILE}"
                yq e -i ".containerRegistry.s3storage.bucket = \"{{repl ConfigOption "reg_incluster_storage_s3_bucketname" }}\"" "${CONFIG_FILE}"
                yq e -i ".containerRegistry.s3storage.certificate.kind = \"secret\"" "${CONFIG_FILE}"
                yq e -i ".containerRegistry.s3storage.certificate.name = \"container-registry-s3-backend\"" "${CONFIG_FILE}"
              fi
            fi

            if [ '{{repl ConfigOptionNotEquals "store_provider" "incluster" }}' = "true" ];
            then
              echo "Gitpod: configuring the storage"

              yq e -i ".metadata.region = \"{{repl ConfigOption "store_region" }}\"" "${CONFIG_FILE}"
              yq e -i ".objectStorage.inCluster = false" "${CONFIG_FILE}"

              if [ '{{repl ConfigOptionEquals "store_provider" "azure" }}' = "true" ];
              then
                echo "Gitpod: configuring storage for Azure"

                yq e -i ".objectStorage.azure.credentials.kind = \"secret\"" "${CONFIG_FILE}"
                yq e -i ".objectStorage.azure.credentials.name = \"storage-azure\"" "${CONFIG_FILE}"
              fi

              if [ '{{repl ConfigOptionEquals "store_provider" "gcp" }}' = "true" ];
              then
                echo "Gitpod: configuring storage for GCP"

                yq e -i ".objectStorage.cloudStorage.project = \"{{repl ConfigOption "store_gcp_project" }}\"" "${CONFIG_FILE}"
                yq e -i ".objectStorage.cloudStorage.serviceAccount.kind = \"secret\"" "${CONFIG_FILE}"
                yq e -i ".objectStorage.cloudStorage.serviceAccount.name = \"storage-gcp\"" "${CONFIG_FILE}"
              fi

              if [ '{{repl ConfigOptionEquals "store_provider" "s3" }}' = "true" ];
              then
                echo "Gitpod: configuring storage for S3"

                yq e -i ".objectStorage.s3.endpoint = \"{{repl ConfigOption "store_s3_endpoint" }}\"" "${CONFIG_FILE}"
                yq e -i ".objectStorage.s3.bucket = \"{{repl ConfigOption "store_s3_bucket" }}\"" "${CONFIG_FILE}"
                yq e -i ".objectStorage.s3.credentials.kind = \"secret\"" "${CONFIG_FILE}"
                yq e -i ".objectStorage.s3.credentials.name = \"storage-s3\"" "${CONFIG_FILE}"
              fi
            fi

            if [ '{{repl ConfigOptionEquals "ssh_gateway" "1" }}' = "true" ];
            then
              echo "Gitpod: Generate SSH host key"
              ssh-keygen -t rsa -q -N "" -f host.key
              yq e -i '.sshGatewayHostKey.kind = "secret"' "${CONFIG_FILE}"
              yq e -i '.sshGatewayHostKey.name = "ssh-gateway-host-key"' "${CONFIG_FILE}"
            fi

            if [ '{{repl ConfigOptionEquals "tls_self_signed_enabled" "1" }}' = "true" ];
            then
              echo "Gitpod: Generating a self-signed certificate with the internal CA"
              yq e -i '.customCACert.kind = "secret"' "${CONFIG_FILE}"
              yq e -i '.customCACert.name = "ca-issuer-ca"' "${CONFIG_FILE}"
            elif [ '{{repl and (ConfigOptionEquals "tls_self_signed_enabled" "0") (ConfigOptionEquals "cert_manager_enabled" "0") (ConfigOptionNotEquals "tls_ca_crt" "") }}' = "true" ];
            then
              echo "Gitpod: Setting CA to be used for certificate"
              yq e -i '.customCACert.kind = "secret"' "${CONFIG_FILE}"
              yq e -i '.customCACert.name = "ca-certificate"' "${CONFIG_FILE}"
            fi

            if [ '{{repl ConfigOptionEquals "user_management_block_enabled" "1" }}' = "true" ];
            then
              echo "Gitpod: Adding blockNewUsers to config"
              yq e -i '.blockNewUsers.enabled = true' "${CONFIG_FILE}"

              for domain in {{repl ConfigOption "user_management_block_passlist" }}
              do
                echo "Gitpod: Adding domain \"${domain}\" to blockNewUsers config"
                yq e -i ".blockNewUsers.passlist += \"${domain}\"" "${CONFIG_FILE}"
              done
            fi

            if [ '{{repl ConfigOptionEquals "advanced_mode_enabled" "1" }}' = "true" ];
            then
              echo "Gitpod: Applying advanced configuration"

              if [ '{{repl ConfigOptionNotEquals "component_proxy_service_serviceType" "" }}' = "true" ];
              then
                # Empty string defaults to LoadBalancer. This maintains backwards compatibility with the deprecated experimental value
                echo "Gitpod: Applying Proxy service type"
                yq e -i ".components.proxy.service.serviceType = \"{{repl ConfigOption "component_proxy_service_serviceType" }}\"" "${CONFIG_FILE}"
              fi

              if [ '{{repl ConfigOptionNotEquals "customization_patch" "" }}' = "true" ];
              then
                CUSTOMIZATION='{{repl ConfigOptionData "customization_patch" | Base64Encode }}'
                echo "Gitpod: Applying customization patch ${CUSTOMIZATION}"

                # Apply the customization property - if something else is set, this will be ignored
                yq e -i ".customization = $(echo "${CUSTOMIZATION}" | base64 -d | yq e -o json '.customization' - | jq -rc) // []" "${CONFIG_FILE}"
              fi
            else
              echo "Gitpod: No advanced configuration applied"
            fi

            echo "Gitpod: Update platform telemetry value"
            yq eval-all --inplace '.experimental.telemetry.data.platform = "{{repl Distribution }}"' "${CONFIG_FILE}"

            echo "Gitpod: Patch Gitpod config"
            base64 -d "${CONFIG_PATCH_FILE}" > /tmp/patch.yaml
            config_patch=$(cat /tmp/patch.yaml)
            echo "Gitpod: ${CONFIG_PATCH_FILE}=${config_patch}"
            yq eval-all --inplace 'select(fileIndex == 0) * select(fileIndex == 1)' "${CONFIG_FILE}" /tmp/patch.yaml

            echo "Gitpod: render Kubernetes manifests"
            echo $(cat ${CONFIG_FILE})
            echo $(/app/installer validate config --config "${CONFIG_FILE}")
  analyzers:
    - clusterVersion:
        outcomes:
          - fail:
              when: "< 1.20.0"
              message: The application requires Kubernetes 1.20.0 or later, and recommends 1.21.0.
              uri: https://www.kubernetes.io
          - warn:
              when: "< 1.21.0"
              message: Your cluster meets the minimum version of Kubernetes, but we recommend you update to 1.21.0 or later.
              uri: https://kubernetes.io
          - pass:
              message: Your cluster meets the recommended and required versions of Kubernetes.
    - textAnalyze:
        checkName: Kernel version is 5.4.0 or above
        fileName: config-validation/config-validation.log
        regex: invalid
        outcomes:
          - pass:
              when: "false"
              message: Kernel version valid
          - fail:
              when: "true"
              message: Kernel must be 5.4.0 or above
    - textAnalyze:
        checkName: Kernel version is 5.4.0 or above
        fileName: kernel/kernel.log
        regex: invalid
        outcomes:
          - pass:
              when: "false"
              message: Kernel version valid
          - fail:
              when: "true"
              message: Kernel must be 5.4.0 or above
    - containerRuntime:
        outcomes:
          - pass:
              when: "== containerd"
              message: containerd runtime was found.
          - fail:
              message: Did not find containerd runtime.
    - distribution:
        outcomes:
          - fail:
              when: == openshift
              message: OpenShift is not supported
          - pass:
              message: The cluster is using a support distribution
    - nodeResources:
        checkName: At least one node must "gitpod.io/workload_meta" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_meta: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_meta" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_ide" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_ide: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_ide" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_workspace_services" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_services: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_workspace_services" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_workspace_regular" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_regular: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_workspace_regular" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_workspace_headless" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_headless: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_workspace_headless" and value "true"
          - pass:
              message: Node with label exists
    - customResourceDefinition:
        checkName: Cert-manager is installed
        customResourceDefinitionName: certificates.cert-manager.io
        outcomes:
          - fail:
              message: Custom resource definition `certificates.cert-manager.io` was not found in the cluster. Please [install `cert-manager`](https://cert-manager.io/docs/installation/) to proceed.
          - pass:
              message: Cert-manager is installed and available.
    - nodeResources:
        checkName: CPU Cores per workload_meta node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_meta: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_ide node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_ide: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - pass:
              message: There are at least 2 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_workspace_services node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_services: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_workspace_regular node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_regular: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_workspace_headless node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_headless: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: Memory per workload_meta node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_meta: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 8G"
              message: Each node must have at least 8GB of memory
          - warn:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - nodeResources:
        checkName: Memory per workload_ide node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_ide: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 4G"
              message: Each node must have at least 4GB of memory
          - pass:
              message: Each node has at least 4GB of memory
    - nodeResources:
        checkName: Memory per workload_workspace_services node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_services: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - nodeResources:
        checkName: Memory per workload_workspace_regular node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_regular: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - nodeResources:
        checkName: Memory per workload_workspace_headless node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_headless: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - storageClass:
        checkName: Check for default storage class
        outcomes:
          - fail:
              message: No default storage class found
          - pass:
              message: Default storage class found
    - textAnalyze:
        checkName: Container registry connection is valid
        fileName: registry/registry.log
        regexGroups: 'registry: (?P<Registry>\w+)'
        outcomes:
          - pass:
              when: "Registry == ok"
              message: Container registry connection is valid
          - fail:
              message: Container registry connection is invalid. Please check your settings and that the resource is accessible from your cluster
    - textAnalyze:
        checkName: Container registry S3 connection is valid
        fileName: registry/registry.log
        regexGroups: 's3: (?P<S3>\w+)'
        outcomes:
          - pass:
              when: "S3 == ok"
              message: Container registry S3 connection is valid
          - fail:
              message: Container registry S3 connection is invalid. Please check your settings and that the resource is accessible from your cluster
    - textAnalyze:
        checkName: Database connection is valid
        fileName: database/database.log
        regexGroups: 'connection: (?P<Connection>\w+)'
        outcomes:
          - pass:
              when: "Connection == ok"
              message: Database connection is valid
          - fail:
              message: Database connection is invalid. Please check your settings and that the database is accessible from your cluster
    - textAnalyze:
        checkName: Database version is valid
        fileName: database/database.log
        regexGroups: 'version: (?P<Version>\d(\.\d+)?)'
        outcomes:
          - pass:
              when: "Version == 5.7"
              message: Database version is valid
          - warn:
              message: Database version could not be verified. This should be MySQL 5.7
    - textAnalyze:
        checkName: Object storage connection is valid
        fileName: storage/storage.log
        regexGroups: 'connection: (?P<Connection>\w+)'
        outcomes:
          - pass:
              when: "Connection == ok"
              message: Object storage connection is valid
          - fail:
              message: Object storage connection is invalid. Please check your settings and that the resource is accessible from your cluster
    - textAnalyze:
        checkName: Pull registry is accessible from cluster
        fileName: ping-registry/ping-registry.log
        regexGroups: 'connection: (?P<Connection>\w+)'
        outcomes:
          - pass:
              when: "Connection == ok"
              message: Registry is accessible
          - fail:
              message: Registry is inaccessible. Please check your network and firewall settings
    - textAnalyze:
        checkName: Gitpod Config is validated for errors
        fileName: config-validation/config-validation.log
        regexGroups: '"valid": (?P<Validity>\w+)'
        outcomes:
          - pass:
              when: "Validity == true"
              message: Config is Valid
          - fail:
              message: Config is Invalid. Please check your config for errors
