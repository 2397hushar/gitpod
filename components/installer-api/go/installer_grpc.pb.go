// Copyright (c) 2022 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstallerServiceClient is the client API for InstallerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallerServiceClient interface {
	ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error)
	ValidateCluster(ctx context.Context, in *ValidateClusterRequest, opts ...grpc.CallOption) (*ValidateClusterRequest, error)
	InitConfig(ctx context.Context, in *InitConfigRequest, opts ...grpc.CallOption) (*InitConfigResponse, error)
	RenderConfig(ctx context.Context, in *RenderConfigRequest, opts ...grpc.CallOption) (*RenderConfigResponse, error)
}

type installerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallerServiceClient(cc grpc.ClientConnInterface) InstallerServiceClient {
	return &installerServiceClient{cc}
}

func (c *installerServiceClient) ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error) {
	out := new(ValidateConfigResponse)
	err := c.cc.Invoke(ctx, "/installer.InstallerService/ValidateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installerServiceClient) ValidateCluster(ctx context.Context, in *ValidateClusterRequest, opts ...grpc.CallOption) (*ValidateClusterRequest, error) {
	out := new(ValidateClusterRequest)
	err := c.cc.Invoke(ctx, "/installer.InstallerService/ValidateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installerServiceClient) InitConfig(ctx context.Context, in *InitConfigRequest, opts ...grpc.CallOption) (*InitConfigResponse, error) {
	out := new(InitConfigResponse)
	err := c.cc.Invoke(ctx, "/installer.InstallerService/InitConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installerServiceClient) RenderConfig(ctx context.Context, in *RenderConfigRequest, opts ...grpc.CallOption) (*RenderConfigResponse, error) {
	out := new(RenderConfigResponse)
	err := c.cc.Invoke(ctx, "/installer.InstallerService/RenderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallerServiceServer is the server API for InstallerService service.
// All implementations must embed UnimplementedInstallerServiceServer
// for forward compatibility
type InstallerServiceServer interface {
	ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error)
	ValidateCluster(context.Context, *ValidateClusterRequest) (*ValidateClusterRequest, error)
	InitConfig(context.Context, *InitConfigRequest) (*InitConfigResponse, error)
	RenderConfig(context.Context, *RenderConfigRequest) (*RenderConfigResponse, error)
	mustEmbedUnimplementedInstallerServiceServer()
}

// UnimplementedInstallerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstallerServiceServer struct {
}

func (UnimplementedInstallerServiceServer) ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}
func (UnimplementedInstallerServiceServer) ValidateCluster(context.Context, *ValidateClusterRequest) (*ValidateClusterRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCluster not implemented")
}
func (UnimplementedInstallerServiceServer) InitConfig(context.Context, *InitConfigRequest) (*InitConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitConfig not implemented")
}
func (UnimplementedInstallerServiceServer) RenderConfig(context.Context, *RenderConfigRequest) (*RenderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderConfig not implemented")
}
func (UnimplementedInstallerServiceServer) mustEmbedUnimplementedInstallerServiceServer() {}

// UnsafeInstallerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallerServiceServer will
// result in compilation errors.
type UnsafeInstallerServiceServer interface {
	mustEmbedUnimplementedInstallerServiceServer()
}

func RegisterInstallerServiceServer(s grpc.ServiceRegistrar, srv InstallerServiceServer) {
	s.RegisterService(&InstallerService_ServiceDesc, srv)
}

func _InstallerService_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallerServiceServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installer.InstallerService/ValidateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallerServiceServer).ValidateConfig(ctx, req.(*ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallerService_ValidateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallerServiceServer).ValidateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installer.InstallerService/ValidateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallerServiceServer).ValidateCluster(ctx, req.(*ValidateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallerService_InitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallerServiceServer).InitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installer.InstallerService/InitConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallerServiceServer).InitConfig(ctx, req.(*InitConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallerService_RenderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallerServiceServer).RenderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installer.InstallerService/RenderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallerServiceServer).RenderConfig(ctx, req.(*RenderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstallerService_ServiceDesc is the grpc.ServiceDesc for InstallerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "installer.InstallerService",
	HandlerType: (*InstallerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateConfig",
			Handler:    _InstallerService_ValidateConfig_Handler,
		},
		{
			MethodName: "ValidateCluster",
			Handler:    _InstallerService_ValidateCluster_Handler,
		},
		{
			MethodName: "InitConfig",
			Handler:    _InstallerService_InitConfig_Handler,
		},
		{
			MethodName: "RenderConfig",
			Handler:    _InstallerService_RenderConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "installer.proto",
}
