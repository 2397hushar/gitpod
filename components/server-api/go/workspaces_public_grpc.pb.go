// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspacesClient is the client API for Workspaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspacesClient interface {
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error)
	StartWorkspace(ctx context.Context, in *StartWorkspaceRequest, opts ...grpc.CallOption) (*StartWorkspaceResponse, error)
	StopWorkspace(ctx context.Context, in *StopWorkspaceRequest, opts ...grpc.CallOption) (*StopWorkspaceResponse, error)
	WatchWorkspaces(ctx context.Context, in *WatchWorkspacesRequest, opts ...grpc.CallOption) (Workspaces_WatchWorkspacesClient, error)
	GetWorkspaceInstance(ctx context.Context, in *GetWorkspaceInstanceRequest, opts ...grpc.CallOption) (*GetWorkspaceInstanceResponse, error)
	ListWorkspaceInstances(ctx context.Context, in *ListWorkspaceInstancesRequest, opts ...grpc.CallOption) (*ListWorkspaceInstancesResponse, error)
	GetRunningWorkspaceInstance(ctx context.Context, in *GetRunningWorkspaceInstanceRequest, opts ...grpc.CallOption) (*GetRunningWorkspaceInstanceResponse, error)
}

type workspacesClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspacesClient(cc grpc.ClientConnInterface) WorkspacesClient {
	return &workspacesClient{cc}
}

func (c *workspacesClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesClient) ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/ListWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error) {
	out := new(CreateWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/CreateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesClient) StartWorkspace(ctx context.Context, in *StartWorkspaceRequest, opts ...grpc.CallOption) (*StartWorkspaceResponse, error) {
	out := new(StartWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/StartWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesClient) StopWorkspace(ctx context.Context, in *StopWorkspaceRequest, opts ...grpc.CallOption) (*StopWorkspaceResponse, error) {
	out := new(StopWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/StopWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesClient) WatchWorkspaces(ctx context.Context, in *WatchWorkspacesRequest, opts ...grpc.CallOption) (Workspaces_WatchWorkspacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Workspaces_ServiceDesc.Streams[0], "/server.Workspaces/WatchWorkspaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspacesWatchWorkspacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Workspaces_WatchWorkspacesClient interface {
	Recv() (*WatchWorkspacesResponse, error)
	grpc.ClientStream
}

type workspacesWatchWorkspacesClient struct {
	grpc.ClientStream
}

func (x *workspacesWatchWorkspacesClient) Recv() (*WatchWorkspacesResponse, error) {
	m := new(WatchWorkspacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspacesClient) GetWorkspaceInstance(ctx context.Context, in *GetWorkspaceInstanceRequest, opts ...grpc.CallOption) (*GetWorkspaceInstanceResponse, error) {
	out := new(GetWorkspaceInstanceResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/GetWorkspaceInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesClient) ListWorkspaceInstances(ctx context.Context, in *ListWorkspaceInstancesRequest, opts ...grpc.CallOption) (*ListWorkspaceInstancesResponse, error) {
	out := new(ListWorkspaceInstancesResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/ListWorkspaceInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesClient) GetRunningWorkspaceInstance(ctx context.Context, in *GetRunningWorkspaceInstanceRequest, opts ...grpc.CallOption) (*GetRunningWorkspaceInstanceResponse, error) {
	out := new(GetRunningWorkspaceInstanceResponse)
	err := c.cc.Invoke(ctx, "/server.Workspaces/GetRunningWorkspaceInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspacesServer is the server API for Workspaces service.
// All implementations must embed UnimplementedWorkspacesServer
// for forward compatibility
type WorkspacesServer interface {
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	StartWorkspace(context.Context, *StartWorkspaceRequest) (*StartWorkspaceResponse, error)
	StopWorkspace(context.Context, *StopWorkspaceRequest) (*StopWorkspaceResponse, error)
	WatchWorkspaces(*WatchWorkspacesRequest, Workspaces_WatchWorkspacesServer) error
	GetWorkspaceInstance(context.Context, *GetWorkspaceInstanceRequest) (*GetWorkspaceInstanceResponse, error)
	ListWorkspaceInstances(context.Context, *ListWorkspaceInstancesRequest) (*ListWorkspaceInstancesResponse, error)
	GetRunningWorkspaceInstance(context.Context, *GetRunningWorkspaceInstanceRequest) (*GetRunningWorkspaceInstanceResponse, error)
	mustEmbedUnimplementedWorkspacesServer()
}

// UnimplementedWorkspacesServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspacesServer struct {
}

func (UnimplementedWorkspacesServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedWorkspacesServer) ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (UnimplementedWorkspacesServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedWorkspacesServer) StartWorkspace(context.Context, *StartWorkspaceRequest) (*StartWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkspace not implemented")
}
func (UnimplementedWorkspacesServer) StopWorkspace(context.Context, *StopWorkspaceRequest) (*StopWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorkspace not implemented")
}
func (UnimplementedWorkspacesServer) WatchWorkspaces(*WatchWorkspacesRequest, Workspaces_WatchWorkspacesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWorkspaces not implemented")
}
func (UnimplementedWorkspacesServer) GetWorkspaceInstance(context.Context, *GetWorkspaceInstanceRequest) (*GetWorkspaceInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceInstance not implemented")
}
func (UnimplementedWorkspacesServer) ListWorkspaceInstances(context.Context, *ListWorkspaceInstancesRequest) (*ListWorkspaceInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaceInstances not implemented")
}
func (UnimplementedWorkspacesServer) GetRunningWorkspaceInstance(context.Context, *GetRunningWorkspaceInstanceRequest) (*GetRunningWorkspaceInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningWorkspaceInstance not implemented")
}
func (UnimplementedWorkspacesServer) mustEmbedUnimplementedWorkspacesServer() {}

// UnsafeWorkspacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspacesServer will
// result in compilation errors.
type UnsafeWorkspacesServer interface {
	mustEmbedUnimplementedWorkspacesServer()
}

func RegisterWorkspacesServer(s grpc.ServiceRegistrar, srv WorkspacesServer) {
	s.RegisterService(&Workspaces_ServiceDesc, srv)
}

func _Workspaces_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspaces_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/ListWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).ListWorkspaces(ctx, req.(*ListWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspaces_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/CreateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspaces_StartWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).StartWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/StartWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).StartWorkspace(ctx, req.(*StartWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspaces_StopWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).StopWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/StopWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).StopWorkspace(ctx, req.(*StopWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspaces_WatchWorkspaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchWorkspacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspacesServer).WatchWorkspaces(m, &workspacesWatchWorkspacesServer{stream})
}

type Workspaces_WatchWorkspacesServer interface {
	Send(*WatchWorkspacesResponse) error
	grpc.ServerStream
}

type workspacesWatchWorkspacesServer struct {
	grpc.ServerStream
}

func (x *workspacesWatchWorkspacesServer) Send(m *WatchWorkspacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Workspaces_GetWorkspaceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).GetWorkspaceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/GetWorkspaceInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).GetWorkspaceInstance(ctx, req.(*GetWorkspaceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspaces_ListWorkspaceInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspaceInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).ListWorkspaceInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/ListWorkspaceInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).ListWorkspaceInstances(ctx, req.(*ListWorkspaceInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspaces_GetRunningWorkspaceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningWorkspaceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServer).GetRunningWorkspaceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Workspaces/GetRunningWorkspaceInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServer).GetRunningWorkspaceInstance(ctx, req.(*GetRunningWorkspaceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Workspaces_ServiceDesc is the grpc.ServiceDesc for Workspaces service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workspaces_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Workspaces",
	HandlerType: (*WorkspacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkspace",
			Handler:    _Workspaces_GetWorkspace_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _Workspaces_ListWorkspaces_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _Workspaces_CreateWorkspace_Handler,
		},
		{
			MethodName: "StartWorkspace",
			Handler:    _Workspaces_StartWorkspace_Handler,
		},
		{
			MethodName: "StopWorkspace",
			Handler:    _Workspaces_StopWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspaceInstance",
			Handler:    _Workspaces_GetWorkspaceInstance_Handler,
		},
		{
			MethodName: "ListWorkspaceInstances",
			Handler:    _Workspaces_ListWorkspaceInstances_Handler,
		},
		{
			MethodName: "GetRunningWorkspaceInstance",
			Handler:    _Workspaces_GetRunningWorkspaceInstance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchWorkspaces",
			Handler:       _Workspaces_WatchWorkspaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "workspaces_public.proto",
}
