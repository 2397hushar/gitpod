// Copyright (c) 2022 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspacesClient is the client API for Workspaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspacesClient interface {
}

type workspacesClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspacesClient(cc grpc.ClientConnInterface) WorkspacesClient {
	return &workspacesClient{cc}
}

// WorkspacesServer is the server API for Workspaces service.
// All implementations must embed UnimplementedWorkspacesServer
// for forward compatibility
type WorkspacesServer interface {
	mustEmbedUnimplementedWorkspacesServer()
}

// UnimplementedWorkspacesServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspacesServer struct {
}

func (UnimplementedWorkspacesServer) mustEmbedUnimplementedWorkspacesServer() {}

// UnsafeWorkspacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspacesServer will
// result in compilation errors.
type UnsafeWorkspacesServer interface {
	mustEmbedUnimplementedWorkspacesServer()
}

func RegisterWorkspacesServer(s grpc.ServiceRegistrar, srv WorkspacesServer) {
	s.RegisterService(&Workspaces_ServiceDesc, srv)
}

// Workspaces_ServiceDesc is the grpc.ServiceDesc for Workspaces service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workspaces_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.Workspaces",
	HandlerType: (*WorkspacesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "workspaces.proto",
}
