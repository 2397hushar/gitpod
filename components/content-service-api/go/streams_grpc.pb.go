// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogStreamServiceClient is the client API for LogStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamServiceClient interface {
	StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error)
	CommitStream(ctx context.Context, in *CommitStreamRequest, opts ...grpc.CallOption) (*CommitStreamResponse, error)
	AccessStream(ctx context.Context, in *AccessStreamRequest, opts ...grpc.CallOption) (*AccessStreamResponse, error)
}

type logStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamServiceClient(cc grpc.ClientConnInterface) LogStreamServiceClient {
	return &logStreamServiceClient{cc}
}

func (c *logStreamServiceClient) StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error) {
	out := new(StartStreamResponse)
	err := c.cc.Invoke(ctx, "/contentservice.LogStreamService/StartStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamServiceClient) CommitStream(ctx context.Context, in *CommitStreamRequest, opts ...grpc.CallOption) (*CommitStreamResponse, error) {
	out := new(CommitStreamResponse)
	err := c.cc.Invoke(ctx, "/contentservice.LogStreamService/CommitStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamServiceClient) AccessStream(ctx context.Context, in *AccessStreamRequest, opts ...grpc.CallOption) (*AccessStreamResponse, error) {
	out := new(AccessStreamResponse)
	err := c.cc.Invoke(ctx, "/contentservice.LogStreamService/AccessStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogStreamServiceServer is the server API for LogStreamService service.
// All implementations must embed UnimplementedLogStreamServiceServer
// for forward compatibility
type LogStreamServiceServer interface {
	StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error)
	CommitStream(context.Context, *CommitStreamRequest) (*CommitStreamResponse, error)
	AccessStream(context.Context, *AccessStreamRequest) (*AccessStreamResponse, error)
	mustEmbedUnimplementedLogStreamServiceServer()
}

// UnimplementedLogStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamServiceServer struct {
}

func (UnimplementedLogStreamServiceServer) StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedLogStreamServiceServer) CommitStream(context.Context, *CommitStreamRequest) (*CommitStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitStream not implemented")
}
func (UnimplementedLogStreamServiceServer) AccessStream(context.Context, *AccessStreamRequest) (*AccessStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessStream not implemented")
}
func (UnimplementedLogStreamServiceServer) mustEmbedUnimplementedLogStreamServiceServer() {}

// UnsafeLogStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamServiceServer will
// result in compilation errors.
type UnsafeLogStreamServiceServer interface {
	mustEmbedUnimplementedLogStreamServiceServer()
}

func RegisterLogStreamServiceServer(s grpc.ServiceRegistrar, srv LogStreamServiceServer) {
	s.RegisterService(&LogStreamService_ServiceDesc, srv)
}

func _LogStreamService_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServiceServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentservice.LogStreamService/StartStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServiceServer).StartStream(ctx, req.(*StartStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamService_CommitStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServiceServer).CommitStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentservice.LogStreamService/CommitStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServiceServer).CommitStream(ctx, req.(*CommitStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamService_AccessStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServiceServer).AccessStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentservice.LogStreamService/AccessStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServiceServer).AccessStream(ctx, req.(*AccessStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogStreamService_ServiceDesc is the grpc.ServiceDesc for LogStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contentservice.LogStreamService",
	HandlerType: (*LogStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartStream",
			Handler:    _LogStreamService_StartStream_Handler,
		},
		{
			MethodName: "CommitStream",
			Handler:    _LogStreamService_CommitStream_Handler,
		},
		{
			MethodName: "AccessStream",
			Handler:    _LogStreamService_AccessStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streams.proto",
}
