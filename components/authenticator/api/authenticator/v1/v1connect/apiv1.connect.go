// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authenticator/v1/apiv1.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/authenticator/api/authenticator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GraphServiceName is the fully-qualified name of the GraphService service.
	GraphServiceName = "authenticator.v1.GraphService"
	// PolicyServiceName is the fully-qualified name of the PolicyService service.
	PolicyServiceName = "authenticator.v1.PolicyService"
	// EvalServiceName is the fully-qualified name of the EvalService service.
	EvalServiceName = "authenticator.v1.EvalService"
)

// GraphServiceClient is a client for the authenticator.v1.GraphService service.
type GraphServiceClient interface {
	AddEdge(context.Context, *connect_go.Request[v1.AddEdgeRequest]) (*connect_go.Response[v1.AddEdgeResponse], error)
}

// NewGraphServiceClient constructs a client for the authenticator.v1.GraphService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGraphServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GraphServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &graphServiceClient{
		addEdge: connect_go.NewClient[v1.AddEdgeRequest, v1.AddEdgeResponse](
			httpClient,
			baseURL+"/authenticator.v1.GraphService/AddEdge",
			opts...,
		),
	}
}

// graphServiceClient implements GraphServiceClient.
type graphServiceClient struct {
	addEdge *connect_go.Client[v1.AddEdgeRequest, v1.AddEdgeResponse]
}

// AddEdge calls authenticator.v1.GraphService.AddEdge.
func (c *graphServiceClient) AddEdge(ctx context.Context, req *connect_go.Request[v1.AddEdgeRequest]) (*connect_go.Response[v1.AddEdgeResponse], error) {
	return c.addEdge.CallUnary(ctx, req)
}

// GraphServiceHandler is an implementation of the authenticator.v1.GraphService service.
type GraphServiceHandler interface {
	AddEdge(context.Context, *connect_go.Request[v1.AddEdgeRequest]) (*connect_go.Response[v1.AddEdgeResponse], error)
}

// NewGraphServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGraphServiceHandler(svc GraphServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/authenticator.v1.GraphService/AddEdge", connect_go.NewUnaryHandler(
		"/authenticator.v1.GraphService/AddEdge",
		svc.AddEdge,
		opts...,
	))
	return "/authenticator.v1.GraphService/", mux
}

// UnimplementedGraphServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGraphServiceHandler struct{}

func (UnimplementedGraphServiceHandler) AddEdge(context.Context, *connect_go.Request[v1.AddEdgeRequest]) (*connect_go.Response[v1.AddEdgeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authenticator.v1.GraphService.AddEdge is not implemented"))
}

// PolicyServiceClient is a client for the authenticator.v1.PolicyService service.
type PolicyServiceClient interface {
	AddPolicy(context.Context, *connect_go.Request[v1.AddPolicyRequest]) (*connect_go.Response[v1.AddPolicyResponse], error)
	IsAllowed(context.Context, *connect_go.Request[v1.IsAllowedRequest]) (*connect_go.Response[v1.IsAllowedResponse], error)
}

// NewPolicyServiceClient constructs a client for the authenticator.v1.PolicyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPolicyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PolicyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &policyServiceClient{
		addPolicy: connect_go.NewClient[v1.AddPolicyRequest, v1.AddPolicyResponse](
			httpClient,
			baseURL+"/authenticator.v1.PolicyService/AddPolicy",
			opts...,
		),
		isAllowed: connect_go.NewClient[v1.IsAllowedRequest, v1.IsAllowedResponse](
			httpClient,
			baseURL+"/authenticator.v1.PolicyService/IsAllowed",
			opts...,
		),
	}
}

// policyServiceClient implements PolicyServiceClient.
type policyServiceClient struct {
	addPolicy *connect_go.Client[v1.AddPolicyRequest, v1.AddPolicyResponse]
	isAllowed *connect_go.Client[v1.IsAllowedRequest, v1.IsAllowedResponse]
}

// AddPolicy calls authenticator.v1.PolicyService.AddPolicy.
func (c *policyServiceClient) AddPolicy(ctx context.Context, req *connect_go.Request[v1.AddPolicyRequest]) (*connect_go.Response[v1.AddPolicyResponse], error) {
	return c.addPolicy.CallUnary(ctx, req)
}

// IsAllowed calls authenticator.v1.PolicyService.IsAllowed.
func (c *policyServiceClient) IsAllowed(ctx context.Context, req *connect_go.Request[v1.IsAllowedRequest]) (*connect_go.Response[v1.IsAllowedResponse], error) {
	return c.isAllowed.CallUnary(ctx, req)
}

// PolicyServiceHandler is an implementation of the authenticator.v1.PolicyService service.
type PolicyServiceHandler interface {
	AddPolicy(context.Context, *connect_go.Request[v1.AddPolicyRequest]) (*connect_go.Response[v1.AddPolicyResponse], error)
	IsAllowed(context.Context, *connect_go.Request[v1.IsAllowedRequest]) (*connect_go.Response[v1.IsAllowedResponse], error)
}

// NewPolicyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPolicyServiceHandler(svc PolicyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/authenticator.v1.PolicyService/AddPolicy", connect_go.NewUnaryHandler(
		"/authenticator.v1.PolicyService/AddPolicy",
		svc.AddPolicy,
		opts...,
	))
	mux.Handle("/authenticator.v1.PolicyService/IsAllowed", connect_go.NewUnaryHandler(
		"/authenticator.v1.PolicyService/IsAllowed",
		svc.IsAllowed,
		opts...,
	))
	return "/authenticator.v1.PolicyService/", mux
}

// UnimplementedPolicyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPolicyServiceHandler struct{}

func (UnimplementedPolicyServiceHandler) AddPolicy(context.Context, *connect_go.Request[v1.AddPolicyRequest]) (*connect_go.Response[v1.AddPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authenticator.v1.PolicyService.AddPolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) IsAllowed(context.Context, *connect_go.Request[v1.IsAllowedRequest]) (*connect_go.Response[v1.IsAllowedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authenticator.v1.PolicyService.IsAllowed is not implemented"))
}

// EvalServiceClient is a client for the authenticator.v1.EvalService service.
type EvalServiceClient interface {
	CleanSlateEval(context.Context, *connect_go.Request[v1.CleanSlateEvalRequest]) (*connect_go.Response[v1.CleanSlateEvalResponse], error)
}

// NewEvalServiceClient constructs a client for the authenticator.v1.EvalService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEvalServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EvalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &evalServiceClient{
		cleanSlateEval: connect_go.NewClient[v1.CleanSlateEvalRequest, v1.CleanSlateEvalResponse](
			httpClient,
			baseURL+"/authenticator.v1.EvalService/CleanSlateEval",
			opts...,
		),
	}
}

// evalServiceClient implements EvalServiceClient.
type evalServiceClient struct {
	cleanSlateEval *connect_go.Client[v1.CleanSlateEvalRequest, v1.CleanSlateEvalResponse]
}

// CleanSlateEval calls authenticator.v1.EvalService.CleanSlateEval.
func (c *evalServiceClient) CleanSlateEval(ctx context.Context, req *connect_go.Request[v1.CleanSlateEvalRequest]) (*connect_go.Response[v1.CleanSlateEvalResponse], error) {
	return c.cleanSlateEval.CallUnary(ctx, req)
}

// EvalServiceHandler is an implementation of the authenticator.v1.EvalService service.
type EvalServiceHandler interface {
	CleanSlateEval(context.Context, *connect_go.Request[v1.CleanSlateEvalRequest]) (*connect_go.Response[v1.CleanSlateEvalResponse], error)
}

// NewEvalServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEvalServiceHandler(svc EvalServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/authenticator.v1.EvalService/CleanSlateEval", connect_go.NewUnaryHandler(
		"/authenticator.v1.EvalService/CleanSlateEval",
		svc.CleanSlateEval,
		opts...,
	))
	return "/authenticator.v1.EvalService/", mux
}

// UnimplementedEvalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEvalServiceHandler struct{}

func (UnimplementedEvalServiceHandler) CleanSlateEval(context.Context, *connect_go.Request[v1.CleanSlateEvalRequest]) (*connect_go.Response[v1.CleanSlateEvalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authenticator.v1.EvalService.CleanSlateEval is not implemented"))
}
