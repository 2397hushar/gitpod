// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: authenticator/v1/apiv1.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphServiceClient interface {
	AddEdge(ctx context.Context, in *AddEdgeRequest, opts ...grpc.CallOption) (*AddEdgeResponse, error)
}

type graphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphServiceClient(cc grpc.ClientConnInterface) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) AddEdge(ctx context.Context, in *AddEdgeRequest, opts ...grpc.CallOption) (*AddEdgeResponse, error) {
	out := new(AddEdgeResponse)
	err := c.cc.Invoke(ctx, "/authenticator.v1.GraphService/AddEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
// All implementations must embed UnimplementedGraphServiceServer
// for forward compatibility
type GraphServiceServer interface {
	AddEdge(context.Context, *AddEdgeRequest) (*AddEdgeResponse, error)
	mustEmbedUnimplementedGraphServiceServer()
}

// UnimplementedGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGraphServiceServer struct {
}

func (UnimplementedGraphServiceServer) AddEdge(context.Context, *AddEdgeRequest) (*AddEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEdge not implemented")
}
func (UnimplementedGraphServiceServer) mustEmbedUnimplementedGraphServiceServer() {}

// UnsafeGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphServiceServer will
// result in compilation errors.
type UnsafeGraphServiceServer interface {
	mustEmbedUnimplementedGraphServiceServer()
}

func RegisterGraphServiceServer(s grpc.ServiceRegistrar, srv GraphServiceServer) {
	s.RegisterService(&GraphService_ServiceDesc, srv)
}

func _GraphService_AddEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).AddEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authenticator.v1.GraphService/AddEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).AddEdge(ctx, req.(*AddEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphService_ServiceDesc is the grpc.ServiceDesc for GraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authenticator.v1.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEdge",
			Handler:    _GraphService_AddEdge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authenticator/v1/apiv1.proto",
}

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyServiceClient interface {
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error)
	IsAllowed(ctx context.Context, in *IsAllowedRequest, opts ...grpc.CallOption) (*IsAllowedResponse, error)
}

type policyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyServiceClient(cc grpc.ClientConnInterface) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error) {
	out := new(AddPolicyResponse)
	err := c.cc.Invoke(ctx, "/authenticator.v1.PolicyService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) IsAllowed(ctx context.Context, in *IsAllowedRequest, opts ...grpc.CallOption) (*IsAllowedResponse, error) {
	out := new(IsAllowedResponse)
	err := c.cc.Invoke(ctx, "/authenticator.v1.PolicyService/IsAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
// All implementations must embed UnimplementedPolicyServiceServer
// for forward compatibility
type PolicyServiceServer interface {
	AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error)
	IsAllowed(context.Context, *IsAllowedRequest) (*IsAllowedResponse, error)
	mustEmbedUnimplementedPolicyServiceServer()
}

// UnimplementedPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (UnimplementedPolicyServiceServer) AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) IsAllowed(context.Context, *IsAllowedRequest) (*IsAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAllowed not implemented")
}
func (UnimplementedPolicyServiceServer) mustEmbedUnimplementedPolicyServiceServer() {}

// UnsafePolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyServiceServer will
// result in compilation errors.
type UnsafePolicyServiceServer interface {
	mustEmbedUnimplementedPolicyServiceServer()
}

func RegisterPolicyServiceServer(s grpc.ServiceRegistrar, srv PolicyServiceServer) {
	s.RegisterService(&PolicyService_ServiceDesc, srv)
}

func _PolicyService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authenticator.v1.PolicyService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).AddPolicy(ctx, req.(*AddPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_IsAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).IsAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authenticator.v1.PolicyService/IsAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).IsAllowed(ctx, req.(*IsAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyService_ServiceDesc is the grpc.ServiceDesc for PolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authenticator.v1.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPolicy",
			Handler:    _PolicyService_AddPolicy_Handler,
		},
		{
			MethodName: "IsAllowed",
			Handler:    _PolicyService_IsAllowed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authenticator/v1/apiv1.proto",
}

// EvalServiceClient is the client API for EvalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvalServiceClient interface {
	CleanSlateEval(ctx context.Context, in *CleanSlateEvalRequest, opts ...grpc.CallOption) (*CleanSlateEvalResponse, error)
}

type evalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvalServiceClient(cc grpc.ClientConnInterface) EvalServiceClient {
	return &evalServiceClient{cc}
}

func (c *evalServiceClient) CleanSlateEval(ctx context.Context, in *CleanSlateEvalRequest, opts ...grpc.CallOption) (*CleanSlateEvalResponse, error) {
	out := new(CleanSlateEvalResponse)
	err := c.cc.Invoke(ctx, "/authenticator.v1.EvalService/CleanSlateEval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvalServiceServer is the server API for EvalService service.
// All implementations must embed UnimplementedEvalServiceServer
// for forward compatibility
type EvalServiceServer interface {
	CleanSlateEval(context.Context, *CleanSlateEvalRequest) (*CleanSlateEvalResponse, error)
	mustEmbedUnimplementedEvalServiceServer()
}

// UnimplementedEvalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEvalServiceServer struct {
}

func (UnimplementedEvalServiceServer) CleanSlateEval(context.Context, *CleanSlateEvalRequest) (*CleanSlateEvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanSlateEval not implemented")
}
func (UnimplementedEvalServiceServer) mustEmbedUnimplementedEvalServiceServer() {}

// UnsafeEvalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvalServiceServer will
// result in compilation errors.
type UnsafeEvalServiceServer interface {
	mustEmbedUnimplementedEvalServiceServer()
}

func RegisterEvalServiceServer(s grpc.ServiceRegistrar, srv EvalServiceServer) {
	s.RegisterService(&EvalService_ServiceDesc, srv)
}

func _EvalService_CleanSlateEval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanSlateEvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalServiceServer).CleanSlateEval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authenticator.v1.EvalService/CleanSlateEval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalServiceServer).CleanSlateEval(ctx, req.(*CleanSlateEvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EvalService_ServiceDesc is the grpc.ServiceDesc for EvalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authenticator.v1.EvalService",
	HandlerType: (*EvalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanSlateEval",
			Handler:    _EvalService_CleanSlateEval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authenticator/v1/apiv1.proto",
}
